Django Commands:
---------------

from django.core.management.base import BaseCommand        (use with handle to create custom management commands)

from django.db import connections            (for db connections['default'], low level allow as to run raw queries)
from django.db import OperationalError       (for capturing db connection exception)
from django.db import connection             (for connection.ensure_connection, just ensure)

from django.db import models

from django.shortcuts import render
from django.shortcuts import get_object_or_404

from django.contrib import admin

from django.urls import path
from django.urls import include

from django.conf import settings          (To modify settings dynamically)

import django                  (django.setup() for loading the changes in settings.py)

from django.core.management import call_command    (Directly call management commands call_command(migrate))


Django Rest Framework Commands:
------------------------------

from rest_framework.request import Request

from rest_framework.response import Response

from rest_framework.decorators import api_view
from rest_framework.decorators import APIView

from rest_framework import status
from rest_framework import generics
from rest_framework import mixins
from rest_framework import viewsets
from rest_framework import routers.DefaultRouter

from rest_framework.permissions import IsAuthenticated

from rest_framework.validators import UniqueValidator

from rest_framework import serializers                (from this we can get ModelSerializer)

SwaggerUI (or) Spectacular:
--------------------------

from drf_spectacular.views import SpectacularAPIView
from drf_spectacular.views import SpectacularSwaggerView

Management Commands:
-------------------

01. python manage.py check --database default (To check the default DB connection status)
02. python manage.py makemigrations
03. python manage.py migrate
04. python manage.py runserver <host>:<port>
05. python manage.py createsuperuser
06. python manage.py wait_for_db (we can create a custom command as wait_for_db)
07. python manage.py spectacular --file schema.yml

Others:
------

# instance -> get
# data -> post
# instance and data -> put